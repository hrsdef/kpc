import {makeStyles, DiaStyles, changeTheme} from './style';
import {Layout, Header, Icon, Card, Input, Colorpicker, Dialog} from 'kpc';
import KD_logo from '../../imgs/KD_logo.png';

const color = {
    '探险者蓝': '#1E52E4',
    '日出红' : '#FF0000',                                      
    '赤铁橙': '#E7682A',
    '金云黄': '#B89534',
    '流光绿': '#57CBCB',
    '云游蓝': '#236FE3',
    '青铜绿': '#10ABBF',
    '祥云紫': '#6769AC',
    '熔岩灰': '#5C879B'
}
const {inputColor, colorType, theme, contrastMenu, preColor, bacColor} = this.get();
const palette = this._palette;

function getColorPelette(color, num, colorType) {
    let colorList = new Array(num).fill('');

    if(colorType == 'HEX') {
        return colorList.map((element, index) => {
            return palette(color, index - 4);
        })
    }

    return colorList.map((element, index) => {
        return hexToRgb(palette(color, index - 4));
    })
}

/**
 * 将hex颜色转成rgb
 */
function hexToRgb(hex) {
    const RGBA = "rgb(" + parseInt("0x" + hex.slice(1, 3)) + "," + 
        parseInt("0x" + hex.slice(3, 5)) + "," + parseInt( "0x" + hex.slice(5, 7)) + ")";

    return {
        red: parseInt("0x" + hex.slice(1, 3)),
        green: parseInt("0x" + hex.slice(3, 5)),
        blue: parseInt("0x" + hex.slice(5, 7)),
        rgb: RGBA
    }
}

function contrast(preColor, bacColor) {
    function computeRGB(R, G, B) {
        const List = [...arguments];
        return List.map((element, index) => {
            const XsRGB = element / 255;
            if(XsRGB <= .03928) {
                return XsRGB / 12.92;
            } 
            return ((XsRGB + .055) / 1.055) ** 2.4;
        })
    }
    if(typeof(preColor) == 'string') {
        preColor = hexToRgb(preColor);
        bacColor = hexToRgb(bacColor);
    }

    const preRGB = computeRGB(preColor['red'], preColor['green'], preColor['blue']);
    const bacRGB = computeRGB(bacColor['red'], bacColor['green'], bacColor['blue']);
    const preLight = 0.2126 * preRGB[0] + 0.7152 * preRGB[1] + .0722 * preRGB[2];
    const bacLight = 0.2126 * bacRGB[0] + 0.7152 * bacRGB[1] + .0722 * bacRGB[2];
    return ((bacLight + 0.05) / (preLight + 0.05)).toFixed(2);
}

const colorPelette = {}
for(let i in color) {
    colorPelette[i] = getColorPelette(color[i], 9, colorType);
}

<Layout class={makeStyles(theme)}>
    <Header height={70}>
        <div class="header-logo">
            <img src={KD_logo}>
        </div>
        <div class="header-title">颜色定制</div>
        <div class="header-options">
           <div class="contrast">
            <a 
                ev-click={this._changeContrastShow.bind(this, true)}
            >色彩对比度</a>
            <Dialog 
                title="色彩对比度" 
                v-model="contrastMenu" 
                class={DiaStyles()}
                showClose={true}
            >
               
                <div 
                    class="content-left"
                    style={{backgroundColor: bacColor, color: preColor}}
                >
                    <div>云服务器</div>
                    <div>
                        云服务器KEC（Kingsoft Cloud Elastic Compute）是云计算基础
                        设施的重要组成部分，提供弹性可伸缩的计算容量，令开发者能够轻松进
                        行互联网规模计算，部署所需服务器环境。云服务器相对物理服务器更为
                        简单高效，可随时根据业务需要进行调配，提升运维效率。
                    </div>
                </div>
                <div class="content-right">
                    <div class="contrast-box">
                        <div class="title">对比度</div>
                        <div class="contrast-number">
                            <!--TODO 对比度数值 -->
                            <div>{contrast(preColor, bacColor)}</div>
                            <div>: 1</div>
                        </div>
                        <div>
                            <div>正常文本</div>
                        </div>
                        <div>
                            <div>大文本</div>
                        </div>
                    </div>
                    <div class="choose-box">
                        <div class='pre'>
                            <div>前景色</div>
                            <div>
                                <Colorpicker v-model="preColor"/>
                            </div>
                        </div>
                        <div>
                            <button ev-click={this._switchColor.bind(this)}>切换</button>
                        </div>
                        <div class='bac'>
                            <div>背景色</div>
                            <div>
                                <Colorpicker v-model="bacColor"/>
                            </div>
                        </div>
                    </div>
                </div>
            </Dialog>
           </div>
            <!--TODO:主题定制以及颜色转换-->
            <div class="theme">
                <button 
                    class={{
                        "checkout": theme == 'light'
                    }}
                    ev-click={this._changeTheme.bind(this, 'light')}
                >明</button>
                <button 
                    class={{
                        "checkout": theme == 'dark'
                    }}
                    ev-click={this._changeTheme.bind(this, 'dark')}
                >暗</button>
            </div>
            <div class="color-type">
                <button 
                    class={{ 
                        "checkout": colorType == 'HEX'
                    }}
                    ev-click={this._changeColorType.bind(this, 'HEX')}
                >HEX</button>
                <button 
                    class={{ 
                        "checkout":colorType == 'RGB'
                    }}
                    ev-click={this._changeColorType.bind(this, 'RGB')}
                >RGB</button>
            </div>
        </div>
    </Header>
    <Layout collapse={true} class="cp-body">
        <Card>
            <div class="card-title">
                <div>自定义主题色</div>
            </div>
            <div class="Color-HEX input" v-if={colorType == 'HEX'}>
                <Input 
                    ev-change={this._changeColor.bind(this)}
                    defaultValue={inputColor} 
                    placeholder="请输入正确的颜色值"
                />
            </div>
            <div class="Color-RGB input" v-else>
                <strong>选择颜色：</strong>
                <Colorpicker v-model="inputColor" />
                <div>{hexToRgb(inputColor)['rgb']}</div>
            </div>
            <div class="color-pelette">
                <div 
                    v-for={getColorPelette(inputColor, 9, colorType)}
                    class="color-pelette-item"
                    style={{
                        backgroundColor: colorType == 'HEX' 
                            ? $value 
                            : $value['rgb']
                    }}
                >
                    {
                        colorType == 'HEX' 
                            ? $value
                            : $value['rgb']
                    }
                </div>
            </div>
        </Card>
        <Card>
            <div class="card-title">
                <div>推荐色板</div>
            </div>
            <div 
                class="recomend" 
                v-for={colorPelette}
            >
                <div class="recomend-item">
                    <div class="recomend-item-title">{$key}</div>
                    <div class="color-pelette">
                        <div 
                            v-for={$value}
                            class="color-pelette-item"
                            style={{
                                backgroundColor: colorType == 'HEX' 
                                    ? $value 
                                    : $value['rgb']
                            }}
                        >
                        {
                            colorType == 'HEX' 
                                ? $value 
                                : $value['rgb']
                        }
                        </div>
                    </div>
                </div>
            </div>
        </Card>  
    </Layout>
</Layout>
