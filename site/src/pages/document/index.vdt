import {Button, Badge, Aside} from 'kpc';
import {makeStyles} from './styles';
import {Link} from '../../components/link';
import {Catalogue} from '../../components/catalogue';

const Article = this.get('Article');

if (!Article) return <div>Loading...</div>;

let currentNav = {};

const Catalog = (props) => {
    let isEmpty = true;

    const lis = props.value.map((value) => {
        if (!value.disabled) isEmpty = false;
        return <li
            class={{
                active: (() => {
                    const path = this.path.slice(1);
                    if (path === value.path) {
                        currentNav = value;
                        return true;
                    }
                })()
            }}
            v-if={!value.disabled}
        >
            <Link href={`/${value.path}/`}>
                {(() => {
                    const matches = value.path.match(/components\/([^\/]+)/);
                    if (matches) {
                        const name = matches[1];
                        return [
                            name[0].toUpperCase() + name.substring(1),
                            <span>{value.title}</span>
                        ];
                    } else {
                        if (value.title === '更新日志') {
                            return <Badge disabled={!!this.get('hasRead')}>{value.title}</Badge>
                        } else {
                            return value.title;
                        }
                    }
                })()}
            </Link>
        </li>
    });
    if (isEmpty) return;
    return <div class="catalog-section">
        <h5 v-if={props.key !== undefined}>{props.key}</h5>
        <ul>{lis}</ul>
    </div>
}

const sidebar = Article.sidebar;
const _sidebar = [];
if (sidebar) {
    if (sidebar.undefined) {
        _sidebar.push({
            key: undefined,
            value: sidebar.undefined
        });
    }
    for (let key in sidebar) {
        if (key !== 'undefined') {
            _sidebar.push({
                key,
                value: key !== '组件' ? 
                    sidebar[key] :
                    sidebar[key].sort((a, b) => {
                        return a.path > b.path ? 1 : -1;
                    })
            });
        }
    }
}

<t:super navIndex="document" {...$props} class={{
    "document-page fixed-aside": true,
    [$props.className]: $props.className,
    [makeStyles(this.config.k)]: true,
}}>
    <b:aside>
        <Aside class={{expanded: this.get('expanded')}} fixed width="260px" theme="white">
            <div class="aside-wrapper">
                <template v-for={_sidebar}>
                    {Catalog($value)}
                </template>
                <div class="aside-border transition"></div>
            </div>
            <Button icon
                ev-click={() => this.set('expanded', !this.get('expanded'))}
            >
                <i class="k-icon ion-android-menu"></i>
            </Button>
        </Aside>
    </b:aside>
    <b:content>
        <article>
            <div class="article-head">
                <div class="title" id="article-title">{currentNav.title}</div>
                <div class="edit-link">
                    如果你发现文档有问题，请帮忙在
                    <a target="_blank" 
                        href={`https://github.com/ksc-fe/kpc/blob/master/${currentNav.path}`}
                    >github</a>
                    上修正该文档
                </div>
            </div>
            <Article ref={this.articleRef} />
            <Catalogue data={this.get('catalogue')}
                v-model="catalogueId"
            />
        </article>
    </b:content>
</t:super>
