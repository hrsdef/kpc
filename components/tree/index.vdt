import {Transition, TransitionGroup, linkEvent} from 'intact';
import {Checkbox} from '../checkbox';
import {getRestProps} from '../utils';
import {makeStyles} from './styles';
import {Icon} from '../icon';
import {Mode} from './useDraggable';

const {className, checkbox, showLine, selectable, draggable} = this.get();
const expandedKeys = this.expanded.get();
const toggleExpanded = this.expanded.toggle;
const toggleChecked = this.checked.toggle;
const selectedKeys = this.selected.get();
const toggleSelected = this.selected.toggle;
const {onDragStart, onDragOver, onDragEnd, draggingKey, overKey, mode} = this.draggable;
const { k } = this.config;

const treeNodes = (nodes) => {
    return nodes.map((node, index) => {
        if (!node.filter) return; 

        const key = node.key;
        const expanded = expandedKeys.has(key);
        const data = node.data;
        const disabled = data.disabled;
        const selected = selectable && selectedKeys.has(key);
        const classNameObj = {
            [`${k}-tree-node`]: true,
            [`${k}-expanded`]: expanded,
            [`${k}-disabled`]: disabled,
            [`${k}-selected`]: selected,
            [`${k}-dragging`]: key === draggingKey.value,
        };
        const labelClassNameObj = {
            [`${k}-tree-label`]: true,
            [`${k}-tree-leaf`]: !node.children,
        };
        if (key === overKey.value) {
            switch (mode.value) {
                case Mode.Before:
                    labelClassNameObj[[`${k}-before`]] = true;
                    break;
                case Mode.After:
                    labelClassNameObj[[`${k}-after`]] = true;
                    break;
                case Mode.Inner:
                    labelClassNameObj[[`${k}-inner`]] = true;
                    break;
            }
        }

        return (
            <div key={key} class={classNameObj}
                draggable={draggable ? true : null}
                ev-dragstart={draggable && linkEvent(node, onDragStart)}
                ev-dragover={draggable && linkEvent(node, onDragOver)}
                ev-dragend={draggable && onDragEnd}
            >
                <div class={labelClassNameObj}>
                    <Icon class={`${k}-tree-icon ion-android-arrow-dropdown`} 
                        v-if={node.children && node.loaded !== false}
                        hoverable
                        ev-click={(e) => {
                            // it may be in dropdownMenu, e.g. TreeSelect
                            e._ignore = true;
                            toggleExpanded(node);
                        }}
                    />
                    <Icon class={`${k}-tree-icon ion-load-c`} rotate
                        v-if={node.loaded === false}
                    />
                    <Checkbox v-if={checkbox} 
                        value={node.checked}
                        disabled={disabled}
                        indeterminate={node.indeterminate}
                        ev-$change:value={() => toggleChecked(node)}
                        class={`${k}-tree-checkbox`}
                    />
                    <div class={`${k}-tree-text c-ellipsis`}
                        ev-click={linkEvent(node, this.onClick)}
                    >
                        <b:label params={[data, node, index]}>
                            {data.label}
                        </b:label>
                    </div>
                </div>
                <Transition {...this.transition}>
                    <div class={`${k}-tree`} v-if={expanded && node.children}>
                        <TransitionGroup {...this.transition}>
                            {treeNodes(node.children)}
                        </TransitionGroup>
                    </div>
                </Transition>
            </div>
        );
    });
};

const classNameObj = {
    [`${k}-tree`]: true,
    [`${k}-line`]: showLine,
    [`${k}-selectable`]: selectable,
    [className]: className,
    [makeStyles(k)]: true,
};

<div class={classNameObj} {...getRestProps(this)}>
    <TransitionGroup {...this.transition}>
        {treeNodes(this.nodes.getNodes())}
    </TransitionGroup>
</div>
