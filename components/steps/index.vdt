import {getRestProps, eachChildren} from '../utils';
import {Step} from './step';
import {makeStepsStyles} from './styles';
import {context as StepsContext} from './context';

const {
    children, className, value,
    status, type, clickable, vertical,
} = this.get();

const classNameObj = {
    [`${k}-steps`]: true,
    [className]: className,
    [`k-${type}`]: true,
    [`${k}-clickable`]: clickable,
    [`${k}-vertical`]: vertical,
    [makeStepsStyles()]: true,
};

let stepIndex = 0;
const steps = [];
eachChildren(children, vNode => {
    if (vNode.tag === Step) {
        vNode.props = {...vNode.props, index: stepIndex};
        steps.push(vNode);
        stepIndex++;
    }
});

// add width
/* const width = (100 / stepIndex) + '%';  */

<StepsContext.Provider value={{
    value,
    status,
    /* width, */
    type,
    onChange: this.changeIndex 
}}>
    <div class={classNameObj} {...getRestProps(this)}>{steps}</div>
</StepsContext.Provider>
