import {directClone, Transition} from 'intact';
import {Dropdown, DropdownItem} from '../dropdown';
import {Tooltip} from '../tooltip';
import {Icon} from '../icon';
import {Menu} from './menu';
import {Ellipsis} from '../ellipsis';
import {getRestProps, expandAnimationCallbacks} from '../utils';
import {isNullOrUndefined} from 'intact-shared';
import {makeItemStyles, makeTitleStyles, makeNestedMenuStyles} from './styles';

const rootMenu = this.rootMenu;
const {theme, type, dot: rootDot, size} = rootMenu.get();
const {children, key, className, disabled, dot} = this.get();
const {isHighlighted, isSelected} = rootMenu.highlight;
const {isExpanded: isExpandedKey} = this.expanded;
const isExpanded = isExpandedKey(key);
const {
    isTopItem, subMenuVNode, isDropdownMenu,
    tooltipContents, iconVNode, titleVNodes,
    position, isCollapse,
} = this.dropdown();

const { k } = this.config;
const classNameObj = {
    [`${k}-menu-item`]: true,
    [className]: className,
    [`${k}-expanded`]: isExpanded, 
    [`${k}-disabled`]: disabled,
    [`${k}-active`]:  isSelected(key), 
    [`${k}-highlighted`]: isHighlighted(key),
    [makeItemStyles(k)]: true,
};

const showDot = isTopItem && !iconVNode && isNullOrUndefined(dot) ? rootDot : dot;
const title = (children) => (
    <div class={{[`${k}-menu-item-title`]: true, [makeTitleStyles(k)]: true}}
        ev-click={this.onClick.bind(this, subMenuVNode)}
    >
        <Icon class={`${k}-menu-dot ion-record`} v-if={showDot} />
        <div class={`${k}-menu-name`}>
            <Ellipsis position="bottom">{children}</Ellipsis>
        </div>
        <Icon class={`${k}-menu-item-arrow ion-arrow-down-b`} v-if={subMenuVNode} />
    </div>
);

<div class={classNameObj} {...getRestProps(this)}>
    <template v-if={!isDropdownMenu}>
        {title(titleVNodes)}
        <Transition
            show={isExpanded}
            key="subMenu"
            {...expandAnimationCallbacks}
        >
            {(() => {
                if (subMenuVNode) {
                    const paddingLeft = this.parentMenu.get('_paddingLeft');
                    const [_classname, _paddingLeft] = makeNestedMenuStyles(k, showDot || !!iconVNode, paddingLeft, size);
                    const className = _$cn({
                        [_classname]: true,
                        [subMenuVNode.className]: subMenuVNode.className,
                        [`${k}-sub-menu`]: true,
                    });
                    const clonedVNode = directClone(subMenuVNode);
                    clonedVNode.props = { ...clonedVNode.props, className, _paddingLeft };
                    clonedVNode.className = className;

                    return clonedVNode;
                }
            })()}
        </Transition>
    </template>

    <template v-else-if={!subMenuVNode}>
        <Tooltip 
            v-if={isTopItem && isCollapse}
            position={rootMenu.get('type') !== 'horizontal' ? 'right' : 'bottom'}
            theme={rootMenu.get('theme') === 'dark' ? 'dark' : 'light'}
        >
            {title(iconVNode)}
            <b:content>{tooltipContents}</b:content> 
        </Tooltip>
        <template v-else>{title(titleVNodes)}</template>
    </template>

    <template v-else>
        <Dropdown position={position}>
            <template>{title(isTopItem && isCollapse ? iconVNode : titleVNodes)}</template>
            <template>{subMenuVNode}</template>
        </Dropdown>
        <Transition
            {/* use a Transition to keep the shrink and expand animation */}
            show={isExpanded}
            key="subMenu"
            {...expandAnimationCallbacks}
        ></Transition>
    </template>
</div>
