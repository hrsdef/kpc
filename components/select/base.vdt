import {TransitionGroup, Transition} from 'intact';
import {Input} from '../input';
import {Icon} from '../icon';
import {isNullOrUndefined, isStringOrNumber} from 'intact-shared';
import makeStyles from './styles';
import {Dropdown} from '../dropdown';
import {getRestProps, addStyle} from '../utils';
import {Wave} from '../wave';
import {context as ErrorContext} from '../form/useError';

const {
    value, multiple,
    loading, disabled, name,
    size, hideIcon, fluid,
    clearable, filterable,
    className, container,
    inline, style, width, show,
    position,
} = this.get();

const classNameObj = {
    'k-select': true,
    'k-disabled': disabled,
    [`k-${size}`]: size !== 'default',
    'k-fluid': fluid,
    'k-inline': inline,
    [className]: className,
    [$props.className]: $props.className,
    [makeStyles()]: true,
};

const placeholder = this.getPlaceholder();
const label = this.getLabel();
const hasValue = this.hasValue();
const {onInput, inputRef, keywords: {value: keywords}} = this.input;
const {onFocusout, triggerRef} = this.focusout;

<ErrorContext.Consumer defaultValue={false}>
    {isInvalid => {
        return <Wave disabled={disabled || isInvalid || inline} inset="-2px">
            <Dropdown
                trigger="click"
                ref={this.dropdownRef}
                disabled={disabled}
                container={container}
                v-model="show"
                position={position}
            >
                <div {...getRestProps(this)} 
                    class={classNameObj}
                    tabindex={disabled ? '-1' : '0'}
                    ev-keydown={this.onKeydown}
                    ev-focusout={onFocusout}
                    style={!isNullOrUndefined(width) ? addStyle(style, {width: `${width}px`}) : style}
                    ref={triggerRef}
                >
                    <div class="k-select-prefix" v-if={$blocks.prefix}>
                        <b:prefix />
                    </div>
                    <div class="k-select-main">
                        <input type="hidden" value={value} name={name} key="hidden-input" />
                        {/* TODO: Need mode on Transition */}
                        <TransitionGroup name="k-fade" appear={false}>
                            <Input v-if={!multiple && filterable}
                                value={show ? keywords : label}
                                ev-$change:value={onInput}
                                disabled={disabled}
                                placeholder={label || placeholder}
                                ref={inputRef}
                                size={size}
                                fluid
                                inline
                                key="input"
                                readonly={!show}
                                waveDisabled={true}
                            />
                            <div class="k-select-placeholder c-ellipsis"
                                v-else-if={!filterable && !hasValue}
                                key="placeholder"
                            >{placeholder}</div>
                            <div class="k-select-value c-ellipsis" v-else-if={!multiple} key="value">
                                <b:value params={[value, label]}>
                                    {label}
                                </b:value>
                            </div>
                            <div v-else
                                class={{
                                    "k-select-values": true,
                                    "k-with-values": $blocks.values,
                                }}
                                key="values"
                            >
                                <TransitionGroup name="k-fade">
                                    <template>
                                        <b:values params={[value, label]}>
                                            <div class="k-select-tag"
                                                v-for={label}
                                                v-for-value="$label"
                                                key={
                                                    isStringOrNumber($label) ? 
                                                        $label :
                                                        isStringOrNumber(value[$key]) ?
                                                            value[$key] :
                                                            undefined
                                                }
                                            >
                                                <span class="k-select-text">
                                                    <b:value params={[value[$key], $label]}>
                                                        {$label}
                                                    </b:value>
                                                </span>
                                                <Icon class="k-icon-close k-select-close"
                                                    ev-click={this.delete.bind(this, $key)}
                                                    hoverable={!disabled}
                                                    disabled={disabled}
                                                />
                                            </div>
                                        </b:values>
                                    </template>
                                </TransitionGroup>
                                <Input v-if={filterable}
                                    class="k-select-input"
                                    value={keywords}
                                    ev-$change:value={onInput}
                                    disabled={disabled}
                                    placeholder={!hasValue ? placeholder : ''}
                                    ref={inputRef}
                                    autoWidth
                                    inline
                                    size={size}
                                    key="filter"
                                    readonly={!show}
                                    waveDisabled={true}
                                />
                            </div>
                        </TransitionGroup>
                    </div>
                    <span class="k-select-suffix" v-if={!hideIcon || clearable || loading || $blocks.suffix}>
                        <Icon v-if={clearable && !disabled}
                            class={{"k-select-clear ion-ios-close": true, "k-show": hasValue}}
                            ev-click={this.clear}
                            hoverable
                        />
                        <span class="k-select-suffix-icon">
                            <b:suffix>
                                <Icon class="ion-load-c" rotate v-if={loading} />
                                <Icon v-else-if={!hideIcon}
                                    class="k-select-arrow ion-ios-arrow-down"
                                    disabled={$props.isDisableArrow}
                                />
                            </b:suffix>
                        </span>
                    </span>
                </div> 
                <template>
                    <b:base-menu>
                        <div>should be implemeted</div>
                    </b:base-menu>
                </template>
            </Dropdown>
        </Wave>
    }}
</ErrorContext.Consumer>
