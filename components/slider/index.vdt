import {linkEvent} from 'intact';
import {Spinner} from '../spinner';
import {Tooltip} from '../tooltip';
import {getRestProps} from '../utils';
import {makeStyles} from './styles';

const {
    disabled, className, max,
    min, unit, showInput,
    range, step, value,
    spinnerProps, showEnd,
    showTooltip, animate, forceStep
} = this.get();
const {
    onStart, trackRef, dragging,
    firstThumbRef, secondThumbRef,
    onFocusin
} = this.draggable;
const { k } = this.config;

const classNameObj = {
    [`${k}-slider`]: true,
    [`${k}-disabled`]: disabled,
    [`${k}-dragging`]: dragging.value || !animate,
    [className]: className,
    [makeStyles(k)]: true,
};

const {barStyle, thumbFirstStyle, thumbSecondStyle} = this.styles();
const {onSpinnerChange, onLeftSpinnerChange, onRightSpinnerChange} = this.value;
const {onKeydown, onKeyup} = this.keyboard;
const {firstTooltipRef, secondTooltipRef, getTooltipProps, hide} = this.tooltip;
const tooltipProps = getTooltipProps();
const tooltip = value => <b:tooltip params={value}>{value}</b:tooltip>
const createThumb = (thumbStyle, isFirst, ref, value, tooltipRef) => {
    return (
        <div class={`${k}-slider-thumb-wrapper`} style={thumbStyle}>
            <Tooltip
                disabled={!showTooltip}
                ref={tooltipRef}
                {...tooltipProps}
                class={`${k}-slider-tooltip`}
            >
                <div class={`${k}-slider-thumb`}
                    tabindex={disabled ? '-1' : '0'}
                    ev-mousedown={onStart}
                    ev-focusin={linkEvent(isFirst, onFocusin)}
                    ev-focusout={hide}
                    ev-keydown={onKeydown}
                    ev-keyup={onKeyup}
                    ref={ref}
                ></div>
                <b:content>{tooltip(value)}</b:content>
            </Tooltip>
        </div>
    );
};

const {onClickTrack, setOneValue} = this.click;
const points = this.points();
const marks = this.marks();
<div class={classNameObj} {...getRestProps(this)}>
    <div class={`${k}-slider-main`}>
        <div class={`${k}-slider-track-wrapper`} ev-click={onClickTrack}>
            <div class={`${k}-slider-track`} ref={trackRef}>
                <div class={`${k}-slider-bar`} style={barStyle}></div>
                {createThumb(
                    thumbFirstStyle,
                    true,
                    firstThumbRef,
                    range ? value[0] : value,
                    firstTooltipRef,
                )}
                <template v-if={range}>
                    {createThumb(
                        thumbSecondStyle,
                        false,
                        secondThumbRef,
                        value[1],
                        secondTooltipRef,
                    )}
                </template>
                <i v-for={points}
                    class={{[`${k}-slider-point`]: true, [`${k}-active`]: $value.active}}
                    style={$value.style}
                ></i>
            </div>
        </div>
        <div class={`${k}-slider-marks`} v-if={marks.length}>
            <span v-for={marks}
                style={$value.style}
                ev-click={linkEvent($value.value, setOneValue)}
                class={{[`${k}-active`]: $value.active}}
            >{$value.text}</span>
        </div>
        <div class={`${k}-slider-ends`} v-else-if={showEnd}>
            <span ev-click={linkEvent(min, setOneValue)}>{min + unit}</span>
            <span ev-click={linkEvent(max, setOneValue)}>{max + unit}</span>
        </div>
    </div>
    <div class={`${k}-slider-spinner`} v-if={showInput}>
        {(() => {
            const props = {
                disabled,
                min,
                max,
                step: step || 0.01,
                vertical: true,
                suffix: unit,
                forceStep: !!step && forceStep,
            };

            return <template>
                <Spinner
                    {...props}
                    value={range ? value[0] : value}
                    ev-$change:value={range ? onLeftSpinnerChange : onSpinnerChange}
                    {...spinnerProps}
                />
                <template v-if={range}>
                    <span class={`${k}-slider-spinner-sep`}>-</span>
                    <Spinner
                        {...props}
                        min={value[0]}
                        value={range ? value[1] : value}
                        ev-$change:value={onRightSpinnerChange}
                        {...spinnerProps}
                    />
                </template>
            </template>
        })()}
    </div>
</div>
