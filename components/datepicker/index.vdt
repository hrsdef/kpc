import {linkEvent} from 'intact';
import {DropdownMenu} from '../dropdown';
import {DatepickerCalendar} from './calendar';
import {DatepickerTime} from './time';
import {Icon} from '../icon';
import {Button} from '../button';
import {_$} from '../../i18n';
import {makePanelStyles} from './styles';
import {PanelTypes, PanelFlags} from './usePanel';
import {isFunction} from 'intact-shared';
import {Tabs, Tab} from '../tabs';

const {className, type, range, multiple, shortcuts} = this.get();
const {
    value: {value},
    onChangeDate,
    onConfirm,
    onChangeTime,
    onChangeDateForRange,
    getTimeValue,
} = this.value;
const classNameObj = {
    'k-datepicker-content': true,
    [className]: className,
    [makePanelStyles()]: true,
};

const {isDisabledTime, isDisabledConfirm} = this.disabled;
const {startPanel, endPanel, getPanel, startRef, endRef} = this.panel;
const generatePanel = (flag) => {
    const panel = getPanel(flag);
    const timeValue = getTimeValue(flag);
    return (
        <div class="k-datepicker-calendar-wrapper">
            {(() => {
                if (type === 'datetime') {
                    let dateString = '0000-00-00';
                    let timeString = '00:00:00';
                    if (timeValue) {
                        const valueString = this.formats.getShowString(timeValue).split(/\s+/);
                        dateString = valueString[0];
                        timeString = valueString[1];
                    }
                    return (
                        <Tabs type="card"
                            value={panel.value}
                            ev-$change:value={panel.set}
                        >
                            <Tab value={PanelTypes.Date}>{dateString}</Tab>
                            <Tab value={PanelTypes.Time} disabled={!timeValue} >{timeString}</Tab>
                        </Tabs>
                    );
                }
            })()}
            <DatepickerCalendar
                v-if={panel.value === PanelTypes.Date}
                value={value}
                ev-change={onChangeDate}
                type={type === 'datetime' ? 'date' : type}
                flag={flag}
                ref={flag === PanelFlags.Start ? startRef : endRef}
            />
            <DatepickerTime
                v-else
                value={timeValue}
                ev-$change:value={v => onChangeTime(v, flag)}
                format={this.formats.getValueFormat()}
                flag={flag}
                isDisabledTime={isDisabledTime}
            />
        </div>
    );
};

<t:super class="k-datepicker">
    <b:base-menu>
        <DropdownMenu class={classNameObj}>
            <div class="k-datepicker-shortcuts" v-if={shortcuts && shortcuts.length}>
                {shortcuts.map($value => {
                    const label = isFunction($value.label) ? $value.label() : $value.label;
                    return <div class="k-datepicker-shortcut c-ellipsis"
                        title={label}
                        ev-click={linkEvent($value, this.setByShortcut)}
                    >{label}</div>
                })}
            </div>
            <div class="k-datepicker-wrapper">
                <div class="k-datepicker-calendars">
                    {generatePanel(PanelFlags.Start)}
                    {range ? generatePanel(PanelFlags.End) : null}
                </div>
                <div v-if={type === 'datetime'} class="k-datepicker-footer">
                    <Button type="primary" size="small"
                        disabled={isDisabledConfirm()}
                        ev-click={onConfirm}
                    >{_$('确定')}</Button>
                </div>
            </div>
        </DropdownMenu>
    </b:base-menu>
    <b:suffix>
        <Icon class="k-icon-calendar" />
    </b:suffix>
</t:super>
