import {getClassAndStyleForFixed} from './useFixedColumns';
import {Dropdown, DropdownMenu, DropdownItem} from '../dropdown';
import {Button} from '../button';
import {Icon} from '../icon';
import {Checkbox} from '../checkbox';
import {makeGroupMenuStyles} from './styles';
import {isStringOrNumber, get} from 'intact-shared';
import {context as GroupContext} from './useGroup';
import {context as SortableContext} from './useSortable';
import {linkEvent} from 'intact';
import {context as TableContext} from './useColumns';
import {context as ResizableContext} from './useResizable';
import {context as FixedColumnsContext} from './useFixedColumns';
import {stopPropagation} from '../utils';
import {Input} from '../input';
import {_$} from '../../i18n';

const {title, fixed, group, multiple, key, sortable, cols, rows} = this.get();
const {onSelect, isChecked, getGroupText, keywords, filteredGroup} = this.group;

<TableContext.Consumer>
    {checkType => {
        return <GroupContext.Consumer>
            {({group: currentGroup, onChange}) => {
                return <SortableContext.Consumer>
                    {({sort, onChange: onChangeSort}) => {
                        return <ResizableContext.Consumer>
                            {({resizable, onStart}) => {
                                return <FixedColumnsContext.Consumer>
                                    {(offsetMap) => {
                                        const {className, style} = getClassAndStyleForFixed(this.get(), offsetMap[key], checkType);
                                        const classNameObj = {
                                            'k-column-sortable': sortable,
                                            [className]: className,
                                        }

                                        const groupValue = currentGroup && currentGroup[key];
                                        const groupText = getGroupText(groupValue);

                                        const type = sort && sort.key === key && sort.type;

                                        let checked;
                                        return <th className={classNameObj}
                                            style={style}
                                            title={isStringOrNumber(title) ? title + (groupText || '') : null}
                                            ev-click={sortable ? linkEvent(key, onChangeSort) : null}
                                            colspan={cols}
                                            rowspan={rows}
                                            ref={this.elementRef}
                                        >
                                            <div v-if={resizable && this.$vNode.props.prevVNode}
                                                class="k-table-resize"
                                                ev-mousedown={e => {
                                                    e._vNode = this.$vNode;
                                                    onStart(e);
                                                }} 
                                            />
                                            <div class="k-table-title">
                                                <div class="k-table-title-text c-ellipsis">
                                                    <b:title>{title}</b:title>
                                                    {groupText}
                                                </div>
                                                <Dropdown v-if={group}
                                                    position={{my: 'center top', at: 'center bottom+5', collision: 'flipfit'}}
                                                    key="dropdown"
                                                    trigger="click"
                                                    ev-show={() => keywords.set('')}
                                                >
                                                    <Icon class="k-icon-down-squared k-table-group"
                                                        ev-click={e => e._ignoreSortable = true}
                                                        hoverable
                                                    />
                                                    <DropdownMenu class={{"k-table-group-dropdown": true, [makeGroupMenuStyles()]: true}}>
                                                        <div class="k-table-group-header">
                                                            <Input size="small" fluid
                                                                placeholder={_$('请输入关键字')}
                                                                value={keywords.value}
                                                                ev-$change:value={keywords.set}
                                                                clearable
                                                            >
                                                                <b:suffix><Icon class="ion-ios-search" /></b:suffix>
                                                            </Input>
                                                        </div>
                                                        <div class="k-table-group-body">
                                                            <DropdownItem v-for={filteredGroup.value}
                                                                ev-select={() => onSelect($value.value, groupValue, onChange)}
                                                                hideOnSelect={!multiple}
                                                                class={{'k-active': (checked = isChecked($value.value, groupValue))}}
                                                            >
                                                                <Checkbox v-if={multiple} value={checked}>{$value.label}</Checkbox>
                                                                <span v-else>{$value.label}</span>
                                                            </DropdownItem>
                                                        </div>
                                                    </DropdownMenu>
                                                </Dropdown>
                                                <div v-if={sortable}
                                                    class={{'k-column-sort': true, [`k-${type}`]: type}}
                                                >
                                                    <Icon class="k-icon-up k-asc" size="mini" />
                                                    <Icon class="k-icon-down k-desc" size="mini" />
                                                </div>
                                            </div>
                                        </th>
                                    }}
                                </FixedColumnsContext.Consumer>
                            }}
                        </ResizableContext.Consumer>
                    }}
                </SortableContext.Consumer>
            }}
        </GroupContext.Consumer>
    }}
</TableContext.Consumer>

